Microsoft (R) Macro Assembler Version 14.29.30148.0	    05/30/23 21:39:35
<"Randomizing and Generating Integer Arrays!"     (Proj5_pow  Page 1 - 1


				TITLE "Randomizing and Generating Integer Arrays!"     (Proj5_powellf.asm)

				; Author: Felicia Powell
				; Last Modified: 5/30/2023*
				; OSU email address: powellf@oregonstate.edu
				; Course number/section:   CS271 Section 402
				; Project Number:    5            Due Date: 5/28/2023
				; Description: This program creates a random array with 200 elements, ranging in value from 15 to 50. It involves the subprocedures:
				; introduction, fillArray, sortList, exchangeElements, displayMedian, displayList, countList, and an additional farewell.
				; In main it writes defines that it will print the introduction to inform the user about the program. Then it will create a random unsorted
				; array from fillArray subprocedure. From there it will print the median of the array. Afterwards it will utilize the exchangeElements within the
				; sortList subprocedure which can then be called to sort the previously random array into numbers in ascending order. After that section, it will
				; utilize countList to count the frequency of how many numbers were printed in the array, for example if the number 15 was printed 7 times,
				; it would start with 7. Then at the end it prints out a farewell statement to the user.

				; *Please note that I am using 2 Grace Days for this assignment and therefore, shall be "late")


				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

				; (insert macro definitions here)

				; (insert constant definitions here)
 = 000000C8			ARRAYSIZE		EQU		200
 = 0000000F			LO				EQU		15
 = 00000032			HI				EQU		50

 00000000			.data

				; (insert variable definitions here)
 00000000 52 61 6E 64 6F	introTitleName			BYTE		"Randomizing and Generating Integer Arrays!				by Felicia Powell",13,10,13,10,0
	   6D 69 7A 69 6E
	   67 20 61 6E 64
	   20 47 65 6E 65
	   72 61 74 69 6E
	   67 20 49 6E 74
	   65 67 65 72 20
	   41 72 72 61 79
	   73 21 09 09 09
	   09 62 79 20 46
	   65 6C 69 63 69
	   61 20 50 6F 77
	   65 6C 6C 0D 0A
	   0D 0A 00
 00000044 54 68 69 73 20	instruct1				BYTE		"This program takes 200 randomly generated integers, between the values of 15 and 50.",13,10,0
	   70 72 6F 67 72
	   61 6D 20 74 61
	   6B 65 73 20 32
	   30 30 20 72 61
	   6E 64 6F 6D 6C
	   79 20 67 65 6E
	   65 72 61 74 65
	   64 20 69 6E 74
	   65 67 65 72 73
	   2C 20 62 65 74
	   77 65 65 6E 20
	   74 68 65 20 76
	   61 6C 75 65 73
	   20 6F 66 20 31
	   35 20 61 6E 64
	   20 35 30 2E 0D
	   0A 00
 0000009B 49 74 20 77 69	instruct2				BYTE		"It will take those numbers, find the median value and also sort them in a separate list.",13,10,0
	   6C 6C 20 74 61
	   6B 65 20 74 68
	   6F 73 65 20 6E
	   75 6D 62 65 72
	   73 2C 20 66 69
	   6E 64 20 74 68
	   65 20 6D 65 64
	   69 61 6E 20 76
	   61 6C 75 65 20
	   61 6E 64 20 61
	   6C 73 6F 20 73
	   6F 72 74 20 74
	   68 65 6D 20 69
	   6E 20 61 20 73
	   65 70 61 72 61
	   74 65 20 6C 69
	   73 74 2E 0D 0A
	   00
 000000F6 46 69 6E 61 6C	instruct3               BYTE        "Finally, it will take those numbers, find how often each value was repeated within the array,",13,10, "and print that amount from lowest to highest value:",13,10,0
	   6C 79 2C 20 69
	   74 20 77 69 6C
	   6C 20 74 61 6B
	   65 20 74 68 6F
	   73 65 20 6E 75
	   6D 62 65 72 73
	   2C 20 66 69 6E
	   64 20 68 6F 77
	   20 6F 66 74 65
	   6E 20 65 61 63
	   68 20 76 61 6C
	   75 65 20 77 61
	   73 20 72 65 70
	   65 61 74 65 64
	   20 77 69 74 68
	   69 6E 20 74 68
	   65 20 61 72 72
	   61 79 2C 0D 0A
	   61 6E 64 20 70
	   72 69 6E 74 20
	   74 68 61 74 20
	   61 6D 6F 75 6E
	   74 20 66 72 6F
	   6D 20 6C 6F 77
	   65 73 74 20 74
	   6F 20 68 69 67
	   68 65 73 74 20
	   76 61 6C 75 65
	   3A 0D 0A 00
 0000018B 0D 0A 0D 0A 54	goodbye                 BYTE        13,10,13,10,"Thank you for using 'Randomizing and Generating Integer Arrays!' I hope you have a lovely day, thanks!",13,10,13,10,0
	   68 61 6E 6B 20
	   79 6F 75 20 66
	   6F 72 20 75 73
	   69 6E 67 20 27
	   52 61 6E 64 6F
	   6D 69 7A 69 6E
	   67 20 61 6E 64
	   20 47 65 6E 65
	   72 61 74 69 6E
	   67 20 49 6E 74
	   65 67 65 72 20
	   41 72 72 61 79
	   73 21 27 20 49
	   20 68 6F 70 65
	   20 79 6F 75 20
	   68 61 76 65 20
	   61 20 6C 6F 76
	   65 6C 79 20 64
	   61 79 2C 20 74
	   68 61 6E 6B 73
	   21 0D 0A 0D 0A
	   00
 000001FA 59 6F 75 72 20	unsortedPrompt			BYTE		"Your list of random unsorted numbers:",13,10,0
	   6C 69 73 74 20
	   6F 66 20 72 61
	   6E 64 6F 6D 20
	   75 6E 73 6F 72
	   74 65 64 20 6E
	   75 6D 62 65 72
	   73 3A 0D 0A 00
 00000222 54 68 65 20 6D	medianPrompt			BYTE		"The median value of your array: ",0
	   65 64 69 61 6E
	   20 76 61 6C 75
	   65 20 6F 66 20
	   79 6F 75 72 20
	   61 72 72 61 79
	   3A 20 00
 00000243 59 6F 75 72 20	sortedPrompt			BYTE		"Your list of random sorted numbers:",13,10,0
	   6C 69 73 74 20
	   6F 66 20 72 61
	   6E 64 6F 6D 20
	   73 6F 72 74 65
	   64 20 6E 75 6D
	   62 65 72 73 3A
	   0D 0A 00
 00000269 59 6F 75 72 20	instancesPrompt			BYTE		"Your list of instances of each generated number, starting with the smallest value:",13,10,0
	   6C 69 73 74 20
	   6F 66 20 69 6E
	   73 74 61 6E 63
	   65 73 20 6F 66
	   20 65 61 63 68
	   20 67 65 6E 65
	   72 61 74 65 64
	   20 6E 75 6D 62
	   65 72 2C 20 73
	   74 61 72 74 69
	   6E 67 20 77 69
	   74 68 20 74 68
	   65 20 73 6D 61
	   6C 6C 65 73 74
	   20 76 61 6C 75
	   65 3A 0D 0A 00
 000002BE  000000C8 [		randArray				DWORD		ARRAYSIZE DUP(?)
	    00000000
	   ]
 000005DE  00000024 [		counts					DWORD		(HI - LO + 1) DUP(?)
	    00000000
	   ]
 0000066E 00000000		randVal					DWORD		?
 00000672 00000000		medianRoundUpVal        DWORD       ?
 00000676 20 00			space					BYTE		" ",0


 00000000			.code
 00000000			main PROC

 00000000  B8 000002BE R		mov EAX, OFFSET randArray                             ; Get the address of randArray
 00000005  B9 000000C8		    mov ECX, ARRAYSIZE                                    ; Set the loop counter to ARRAYSIZE
				    
				    ; print the introduction title
 0000000A  E8 00000089		    call introduction
 0000000F  E8 00000000 E	    call CrLf
 00000014  E8 00000000 E	    call CrLf

				    ; prints the title for the unsorted list
 00000019  BA 000001FA R	    mov EDX, OFFSET unsortedPrompt
 0000001E  E8 00000000 E	    call WriteString                                      ; "Your list of random unsorted numbers:"

				    ; fills the array with random numbers
 00000023  E8 00000000 E	    call Randomize
 00000028  E8 00000099		    call fillArray

				    ; prints the unsorted array
 0000002D  E8 00000153		    call displayList
 00000032  E8 00000000 E	    call CrLf
 00000037  E8 00000000 E	    call CrLf

				    ; prints the title for the median
 0000003C  BA 00000222 R	    mov EDX, OFFSET mEDIanPrompt
 00000041  E8 00000000 E	    call WriteString                                      ; "The mEDIan value of your array:"

				    ; sorts the array
 00000046  E8 000000AE		    call sortList

				    ; prints the mEDIan value
 0000004B  E8 000000F4		    call displayMEDIan
 00000050  E8 00000000 E	    call CrLf
 00000055  E8 00000000 E	    call CrLf

				    ; prints the title for the sorted list
 0000005A  BA 00000243 R	    mov EDX, OFFSET sortedPrompt
 0000005F  E8 00000000 E	    call WriteString                                      ; "Your list of random sorted numbers:"

				    ; prints the sorted array
 00000064  E8 0000011C		    call displayList
 00000069  E8 00000000 E	    call CrLf
 0000006E  E8 00000000 E	    call CrLf

				    ; generates the counts array
 00000073  E8 0000015D		    call countList

				    ; prints the title for the frequency of numbers printed, lowest to highest
 00000078  BA 00000269 R	    mov EDX, OFFSET instancesPrompt
 0000007D  E8 00000000 E	    call WriteString                                      ; "Your list of instances of each generated number, starting with the smallest value:"

				    ; prints the list of frequencies
 00000082  E8 000000FE		    call displayList

				    ; say farewell
 00000087  E8 00000000 E	    call CrLf
 0000008C  E8 00000178		    call farewell

 00000091			main ENDP
					Invoke ExitProcess,0	; exit to operating system
 00000091  6A 00	   *	    push   +000000000h
 00000093  E8 00000000 E   *	    call   ExitProcess

				; (insert additional procedures here)

				; -----------------------------------------------------------------------------------------------------------------------------------------------------


				; Name: introduction
				;
				; Prints the program title and my name as the author, then it informs the user
				; of the instructions to follow.
				;
				; Preconditions: None
				;
				; Postconditions: Prompts are displayed on the output
				;
				; Receives: introTitleName, instruct1, instruct2, instruct3
				;
				; Returns: None

 00000098			introduction PROC

					; title and name
 00000098  BA 00000000 R		mov		EDX, OFFSET introTitleName
 0000009D  E8 00000000 E		call	WriteString									; "Randomizing and Generating Integer Arrays!				by Felicia Powell"
 000000A2  E8 00000000 E		call	CrLf

 000000A7  BA 00000044 R		mov		EDX, OFFSET instruct1
 000000AC  E8 00000000 E		call	WriteString									; "This program takes 200 randomly generated integers, between the values of 15 and 50."

 000000B1  BA 0000009B R		mov		EDX, OFFSET instruct2						
 000000B6  E8 00000000 E		call	WriteString									; "It will take those numbers, find the mEDIan value and also sort them in a separate list."

 000000BB  BA 000000F6 R		mov		EDX, OFFSET instruct3						
 000000C0  E8 00000000 E		call	WriteString									; "Finally, it will take those numers, find how often each value was repeated within the array 
																		; and print that amount from lowest to highest value."


 000000C5  C3				ret
 000000C6			introduction ENDP


				; -----------------------------------------------------------------------------------------------------------------------------------------------------


				; Name: fillArray
				;
				; Description:
				;
				; Preconditions:
				;
				; Postconditions: 
				;
				; Receives: 
				;
				; Returns: 

 000000C6			fillArray PROC USES EBX ESI EDI

 000000C6  53		   *	    push   ebx
 000000C7  56		   *	    push   esi
 000000C8  57		   *	    push   edi
 000000C9  B9 000000C8		    mov ECX, ARRAYSIZE          ; Set the loop counter to ARRAYSIZE
 000000CE  BE 000002BE R	    mov ESI, OFFSET randArray   ; Point to the start of randArray

 000000D3			fillLoop:
 000000D3  E8 00000000 E	    call RandomRange            ; Generate a random number between 0 and (HI - LO)
 000000D8  83 C0 0F		    add EAX, LO                 ; Add LO to the random number

 000000DB  83 F8 32		    cmp EAX, HI                 ; Compare the generated number with HI
 000000DE  77 0E		    ja regenerateNumber          ; Jump if above (greater than) HI
 000000E0  83 F8 0F		    cmp EAX, LO                 ; Compare the generated number with LO
 000000E3  72 09		    jb regenerateNumber            ; Jump if below (less than) LO

 000000E5  89 06		    mov [ESI], EAX              ; Store the random number in the current element of randArray
 000000E7  83 C6 04		    add ESI, 4                  ; Move to the next element of randArray
 000000EA  E2 E7		    loop fillLoop               ; Repeat until all elements are filled

 000000EC  EB 07		    jmp fillEnd

 000000EE			regenerateNumber:
 000000EE  E8 00000000 E	    call RandomRange            ; Regenerate a random number if it exceeded the range
 000000F3  EB DE		    jmp fillLoop

 000000F5			fillEnd:


				    ret
 000000F5  5F		   *	    pop    edi
 000000F6  5E		   *	    pop    esi
 000000F7  5B		   *	    pop    ebx
 000000F8  C3		   *	    ret    00000h
 000000F9			fillArray ENDP


				; -----------------------------------------------------------------------------------------------------------------------------------------------------


				; Name: sortList
				;
				; Description: Sorts the array in ascending order
				;
				; Preconditions: The array to be sorted is in randArray
				;
				; Postconditions: The array is sorted in ascending order
				;
				; Receives: None
				;
				; Returns: None

 000000F9			sortList PROC
 000000F9  51			    push ECX                    ; Preserve ECX
 000000FA  56			    push ESI                    ; Preserve ESI
 000000FB  57			    push EDI                    ; Preserve EDI

 000000FC  B9 000000C8		    mov ECX, ARRAYSIZE          ; Set the loop counter to ARRAYSIZE
 00000101  BE 000002BE R	    mov ESI, OFFSET randArray        ; Point to the start of the list

 00000106			    outerLoop:
 00000106  8B F9		        mov EDI, ECX                  ; Copy the outer loop counter to EDI
 00000108  4F			        dec EDI                       ; Decrement EDI to use as an index

 00000109			        innerLoop:
 00000109  8B 04 BE		            mov EAX, [ESI + EDI * 4]       ; Load the current element into EAX
 0000010C  8B 5C BE 04		            mov EBX, [ESI + EDI * 4 + 4]   ; Load the next element into EBX

 00000110  3B C3		            cmp EAX, EBX                  ; Compare the current element with the next element
 00000112  76 0D		            jbe skipSwap                  ; Jump if the current element is less than or equal to the next element

				            ; Swap the elements
 00000114  8B D0		            mov EDX, EAX                  ; Move the current element to EDX
 00000116  8B C3		            mov EAX, EBX                  ; Move the next element to EAX
 00000118  8B DA		            mov EBX, EDX                  ; Move the temporary element (current element) to EBX

 0000011A  89 04 BE		            mov [ESI + EDI * 4], EAX       ; Store the updated current element
 0000011D  89 5C BE 04		            mov [ESI + EDI * 4 + 4], EBX   ; Store the updated next element

 00000121			        skipSwap:
 00000121  4F			            dec EDI                  ; Decrement the inner loop counter
 00000122  83 FF 00		            cmp EDI, 0               ; Compare with zero
 00000125  75 E2		            jnz innerLoop            ; Jump if the inner loop counter is not zero

 00000127  49			        dec ECX                       ; Decrement the outer loop counter
 00000128  83 F9 00		        cmp ECX, 0                    ; Compare with zero
 0000012B  75 D9		        jnz outerLoop                 ; Jump if the outer loop counter is not zero

 0000012D  5F			    pop EDI                     ; Restore EDI
 0000012E  5E			    pop ESI                     ; Restore ESI
 0000012F  59			    pop ECX                     ; Restore ECX

 00000130  C3			    ret
 00000131			sortList ENDP


				; -----------------------------------------------------------------------------------------------------------------------------------------------------


				; Name: exchangeElements
				;
				; Description: Swaps two elements in the array
				;
				; Preconditions: The addresses of the elements to be swapped are in ESI and EDX
				;
				; Postconditions: The elements are swapped in the array
				;
				; Receives: ESI - Address of the first element
				;           EDX - Address of the second element
				;
				; Returns: None

 00000131			exchangeElements PROC USES EBX ESI EDI

 00000131  53		   *	    push   ebx
 00000132  56		   *	    push   esi
 00000133  57		   *	    push   edi
 00000134  53			    push EBX
 00000135  50			    push EAX
 00000136  8B D8		    mov EBX, EAX      ; Load the value at address pointed by ESI into EBX
 00000138  8B C2		    mov EAX, EDX      ; Load the value at address pointed by EDX into EAX
 0000013A  89 06		    mov [ESI], EAX      ; Store the value from EAX at the address pointed by ESI
 0000013C  89 1A		    mov [EDX], EBX      ; Store the value from EBX at the address pointed by EDX

 0000013E  58			    pop EAX
 0000013F  5B			    pop EBX

					ret
 00000140  5F		   *	    pop    edi
 00000141  5E		   *	    pop    esi
 00000142  5B		   *	    pop    ebx
 00000143  C3		   *	    ret    00000h
 00000144			exchangeElements ENDP


				; -----------------------------------------------------------------------------------------------------------------------------------------------------


				; Name: displayMedian
				;
				; Description: 
				;
				; Preconditions:
				;
				; Postconditions: 
				;
				; Receives:
				;
				; Returns:

 00000144			displayMedian PROC USES ESI

 00000144  56		   *	    push   esi
 00000145  BE 000002BE R	    mov ESI, OFFSET randArray       ; Point to the start of randArray
 0000014A  B9 000000C8		    mov ECX, ARRAYSIZE              ; Set the loop counter to ARRAYSIZE

				    ; Find the middle element index
 0000014F  B8 000000C8		    mov EAX, ARRAYSIZE
 00000154  33 D2		    xor EDX, EDX
 00000156  BB 00000002		    mov EBX, 2
 0000015B  F7 F3		    div EBX                         ; Divide ARRAYSIZE by 2

				    ; Check if ARRAYSIZE is even
 0000015D  83 FA 00		    cmp EDX, 0
 00000160  74 02		    je evenLength                   ; Jump if even length
 00000162  75 08		    jne oddLength                   ; Jump if odd length

 00000164			evenLength:
 00000164  83 E8 01		    sub EAX, 1                      ; Subtract 1 from the index to account for 0-based indexing
 00000167  8B 04 86		    mov EAX, [ESI + EAX * 4]        ; Load the element at the middle index into EAX
 0000016A  EB 03		    jmp medianFound

 0000016C			oddLength:
 0000016C  8B 04 86		    mov EAX, [ESI + EAX * 4]        ; Load the element at the middle index into EAX

 0000016F			medianFound:
				    ; Display the median value
 0000016F  BA 00000222 R	    mov EDX, OFFSET medianPrompt    ; Point to the medianPrompt string
 00000174  E8 00000000 E	    call WriteString                ; Print "The median value of your array: "
 00000179  E8 00000000 E	    call WriteDec                   ; Print the median value stored in EAX
 0000017E  E8 00000000 E	    call CrLf


					ret
 00000183  5E		   *	    pop    esi
 00000184  C3		   *	    ret    00000h
 00000185			displayMedian ENDP


				; -----------------------------------------------------------------------------------------------------------------------------------------------------


				; Name: displayList
				;
				; Description:
				;
				; Preconditions: 
				;
				; Postconditions: 
				;
				; Receives: 

 00000185			displayList PROC

 00000185  51			    push ECX                    ; Preserve ECX
 00000186  56			    push ESI                    ; Preserve ESI

 00000187  B9 000000C8		    mov ECX, ARRAYSIZE          ; Set the loop counter to ARRAYSIZE
 0000018C  BE 000002BE R	    mov ESI, OFFSET randArray   ; Point to the start of randArray

 00000191			    printLoop:
 00000191  8B 06		        mov EAX, [ESI]              ; Load the current element of randArray into EAX
 00000193  E8 00000000 E	        call WriteDec               ; Print the integer value stored in EAX

 00000198  BA 00000676 R	        mov EDX, OFFSET space       ; Load the address of the space character
 0000019D  E8 00000000 E	        call WriteString            ; Print a space character

 000001A2  83 C6 04		        add ESI, 4                  ; Move to the next element of randArray

 000001A5  83 E9 01		        sub ECX, 1                  ; Decrement the loop counter

 000001A8  83 F9 00		        cmp ECX, 0                  ; Check if all elements have been printed
 000001AB  74 20		        je finishPrint               ; Jump to finishPrint if all elements have been printed

 000001AD  BA 000000C8		        mov EDX, ARRAYSIZE          ; Load the maximum number of elements to print in a line
 000001B2  2B D1		        sub EDX, ECX                ; Calculate the number of elements printed so far

 000001B4  8B C2		        mov EAX, EDX                ; Store the number of elements printed so far in EAX
 000001B6  33 D2		        xor EDX, EDX                ; Clear EDX
 000001B8  BB 00000014		        mov EBX, 20                 ; Store the dESIred number of elements per line in EBX
 000001BD  F7 F3		        div EBX                     ; Divide EAX by EBX (number of elements per line)

 000001BF  83 FA 00		        cmp EDX, 0                  ; Check if EDX is zero (indicating 20 elements have been printed)
 000001C2  74 02		        je newLine                  ; Jump to newLine if 20 elements have been printed

 000001C4  EB 05		        jmp continuePrint           ; Jump to continuePrint if the conditions are not met

 000001C6			    newLine:
 000001C6  E8 00000000 E	        call CrLf                   ; Move to the next line

 000001CB			    continuePrint:
 000001CB  EB C4		        jmp printLoop               ; Jump to printLoop to continue the loop

 000001CD			    finishPrint:
 000001CD  E8 00000000 E	        call CrLf                   ; Move to the next line after printing all elements

 000001D2  5E			    pop ESI                     ; Restore ESI
 000001D3  59			    pop ECX                     ; Restore ECX

 000001D4  C3				ret
 000001D5			displayList ENDP


				; -----------------------------------------------------------------------------------------------------------------------------------------------------


				; Name: countList
				;
				; Description: 
				;
				; Preconditions: 
				;
				; Postconditions:
				;
				; Receives: 
				;
				; Returns: 

 000001D5			countList PROC
 000001D5  51			    push ECX                    ; Preserve ECX
 000001D6  56			    push ESI                    ; Preserve ESI

 000001D7  B9 000000C8		    mov ECX, ARRAYSIZE          ; Set the loop counter to ARRAYSIZE
 000001DC  BE 000002BE R	    mov ESI, OFFSET randArray   ; Point to the start of randArray

				    ; Clear the counts array
 000001E1  B9 00000024		    mov ECX, HI - LO + 1
 000001E6  BF 000005DE R	    mov EDI, OFFSET counts
 000001EB  33 C0		    xor EAX, EAX
 000001ED  F3/ AB		    rep stosd

 000001EF			    countLoop:
 000001EF  8B 06		        mov EAX, [ESI]              ; Load the current element of randArray into EAX

 000001F1  83 E8 0F		        sub EAX, LO                 ; Subtract LO from the current number to calculate the index
 000001F4  C1 E0 02		        shl EAX, 2                  ; Multiply the index by 4 (since each count is 4 bytes)
 000001F7  BB 000005DE R	        mov EBX, OFFSET counts      ; Point to the start of counts array
 000001FC  03 D8		        add EBX, EAX                ; Calculate the address of the current index in counts

 000001FE  83 03 01		        add dword ptr [EBX], 1      ; Increment the value at the current index in counts

 00000201  83 C6 04		        add ESI, 4                  ; Move to the next element of randArray
 00000204  E2 E9		        loop countLoop              ; Repeat until all elements are processed

 00000206  5E			    pop ESI                     ; Restore ESI
 00000207  59			    pop ECX                     ; Restore ECX

 00000208  C3			    ret
 00000209			countList ENDP


				; -----------------------------------------------------------------------------------------------------------------------------------------------------


				; Name: farewell
				;
				; Prints a goodbye message and thanks the user for using the program.
				;
				; Preconditions: None
				;
				; Postconditions: Prompts are displayed on the output
				;
				; Receives: goodbye 
				;
				; Returns: None

 00000209			farewell PROC
					
 00000209  BA 0000018B R		mov		EDX, OFFSET goodbye							
 0000020E  E8 00000000 E		call	WriteString									; "Thank you for using 'Randomizing and Generating Integer Arrays!' I hope you have a lovely day, thanks!"
 00000213  E8 00000000 E		call	CrLf

 00000218  C3				ret
 00000219			farewell ENDP


				; -----------------------------------------------------------------------------------------------------------------------------------------------------



				END main
Microsoft (R) Macro Assembler Version 14.29.30148.0	    05/30/23 21:39:35
<"Randomizing and Generating Integer Arrays!"     (Proj5_pow  Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00000678 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000219 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
countList  . . . . . . . . . . .	P Near	 000001D5 _TEXT	Length= 00000034 Public STDCALL
  countLoop  . . . . . . . . . .	L Near	 000001EF _TEXT	
displayList  . . . . . . . . . .	P Near	 00000185 _TEXT	Length= 00000050 Public STDCALL
  printLoop  . . . . . . . . . .	L Near	 00000191 _TEXT	
  newLine  . . . . . . . . . . .	L Near	 000001C6 _TEXT	
  continuePrint  . . . . . . . .	L Near	 000001CB _TEXT	
  finishPrint  . . . . . . . . .	L Near	 000001CD _TEXT	
displayMedian  . . . . . . . . .	P Near	 00000144 _TEXT	Length= 00000041 Public STDCALL
  evenLength . . . . . . . . . .	L Near	 00000164 _TEXT	
  oddLength  . . . . . . . . . .	L Near	 0000016C _TEXT	
  medianFound  . . . . . . . . .	L Near	 0000016F _TEXT	
exchangeElements . . . . . . . .	P Near	 00000131 _TEXT	Length= 00000013 Public STDCALL
farewell . . . . . . . . . . . .	P Near	 00000209 _TEXT	Length= 00000010 Public STDCALL
fillArray  . . . . . . . . . . .	P Near	 000000C6 _TEXT	Length= 00000033 Public STDCALL
  fillLoop . . . . . . . . . . .	L Near	 000000D3 _TEXT	
  regenerateNumber . . . . . . .	L Near	 000000EE _TEXT	
  fillEnd  . . . . . . . . . . .	L Near	 000000F5 _TEXT	
introduction . . . . . . . . . .	P Near	 00000098 _TEXT	Length= 0000002E Public STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000091 Public STDCALL
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
sortList . . . . . . . . . . . .	P Near	 000000F9 _TEXT	Length= 00000038 Public STDCALL
  outerLoop  . . . . . . . . . .	L Near	 00000106 _TEXT	
  innerLoop  . . . . . . . . . .	L Near	 00000109 _TEXT	
  skipSwap . . . . . . . . . . .	L Near	 00000121 _TEXT	
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
ARRAYSIZE  . . . . . . . . . . .	Number	 000000C8h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
HI . . . . . . . . . . . . . . .	Number	 00000032h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
LO . . . . . . . . . . . . . . .	Number	 0000000Fh   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
counts . . . . . . . . . . . . .	DWord	 000005DE _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
goodbye  . . . . . . . . . . . .	Byte	 0000018B _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
instancesPrompt  . . . . . . . .	Byte	 00000269 _DATA	
instruct1  . . . . . . . . . . .	Byte	 00000044 _DATA	
instruct2  . . . . . . . . . . .	Byte	 0000009B _DATA	
instruct3  . . . . . . . . . . .	Byte	 000000F6 _DATA	
introTitleName . . . . . . . . .	Byte	 00000000 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
medianPrompt . . . . . . . . . .	Byte	 00000222 _DATA	
medianRoundUpVal . . . . . . . .	DWord	 00000672 _DATA	
randArray  . . . . . . . . . . .	DWord	 000002BE _DATA	
randVal  . . . . . . . . . . . .	DWord	 0000066E _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
sortedPrompt . . . . . . . . . .	Byte	 00000243 _DATA	
space  . . . . . . . . . . . . .	Byte	 00000676 _DATA	
unsortedPrompt . . . . . . . . .	Byte	 000001FA _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
